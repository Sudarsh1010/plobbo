generator client {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog {
  id                  String              @id @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  updated_at          DateTime            @default(now()) @db.Timestamptz(6)
  published_date      DateTime?           @db.Timestamptz(6)
  organization_id     String?             @db.Uuid
  author_id           String              @db.Uuid
  slug                String              @db.VarChar(255)
  image               String?             @db.VarChar(255)
  body                Json[]
  content             String              @default("")
  tags                String[]            @default([])
  likes               Int                 @default(0)
  status              blog_status         @default(DRAFT)
  organization_member organization_member @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization        organization?       @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  blog_metadata       blog_metadata?
}

model blog_metadata {
  id             String   @id @db.Uuid
  blog           blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  blog_id        String   @unique @db.Uuid
  title          String // SEO title
  description    String // SEO meta description
  keywords       String? // Comma-separated keywords
  og_title       String? // Open Graph title (for Facebook/LinkedIn/Discord/Twitter/etc..)
  og_description String? // Open Graph description
  og_image       String? // Open Graph image URL
  og_url         String? // Canonical URL for Open Graph
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
}

model email_verification_request {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.Uuid
  email      String   @db.VarChar
  otp        String   @db.VarChar
  expires_at DateTime @db.Timestamptz(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id                  String                @id @db.Uuid
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  name                String                @db.VarChar
  slug                String                @unique() @db.VarChar
  description         String?               @db.VarChar
  logo                String                @db.VarChar(255)
  blog                blog[]
  organization_member organization_member[]
}

model organization_member {
  id              String       @id @db.Uuid
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?    @default(now()) @db.Timestamptz(6)
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  role            role
  blog            blog[]
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile_picture String?      @db.VarChar(255)
  bio             String?      @db.VarChar(255)
  display_name    String?      @db.VarChar(255)
}

model session {
  id         String    @id
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  user_id    String    @db.Uuid
  expires_at DateTime  @db.Timestamptz(6)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                         String                       @id @db.Uuid
  created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
  email                      String                       @unique() @db.VarChar
  name                       String                       @db.VarChar
  email_verified             Boolean                      @default(false)
  recovery_code              String?                      @db.VarChar
  password_hash              String?
  profile_picture            String?                      @db.VarChar(255)
  email_verification_request email_verification_request[]
  organization_member        organization_member[]
  session                    session[]
}

enum blog_status {
  DRAFT
  PUBLISHED
}

enum role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}
